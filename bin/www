#!/usr/bin/env node

/**
 * Configs
 */
configsServer = require("../configs/server.conf")
configsFront = require("../configs/front.conf")

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug');
var http = require('http');
var argv = require('minimist')(process.argv.slice(2));

// globals
error = debug('error');
debug = debug('platformer:server');
_ = require('lodash');
uniqid = require('uniqid');
fs = require('fs');


/**
 * Matter JS
 */

Matter = require('matter-js');
// module aliases
Engine = Matter.Engine
Render = Matter.Render
World = Matter.World
Bodies = Matter.Bodies
Body = Matter.Body
Events = Matter.Events

/**
 * Games Manager
 */
GamesManager = require("../game/GamesManager")
gamesManager = new GamesManager();

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(argv.port || configsServer.port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Socket.io
 */
var io = require('socket.io')(server);
io.sockets.on('connection', require('../socket.io/socket')());


/**
 * Session
 */
session = require("express-session")({
    secret: "my-secret",
    resave: true,
    saveUninitialized: true
});
sharedsession = require("express-socket.io-session");

// Use express-session middleware for express
app.use(session);

// Use shared session middleware for socket.io
// setting autoSave:true
io.use(sharedsession(session, {
    autoSave:true
}));


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
